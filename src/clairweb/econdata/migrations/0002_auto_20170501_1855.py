# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-05-01 18:55
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('econdata', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='Internal unique ID of each price.')),
                ('price', models.FloatField(verbose_name='The numeric value of the price.')),
                ('currency', models.CharField(max_length=3, verbose_name="The currency of the price. For example: 'EUR', 'USD'")),
                ('condition', models.FloatField(verbose_name='Multiplier for condition. \n1.0: new/perfect, 0.7: used, 0.0: worthless. ')),
                ('time', models.DateTimeField(verbose_name='Time and date at which the price was payed.')),
                ('price_type', models.CharField(choices=[('observed', 'There was a listing with only one product, and this was the price.'), ('estimated', 'The price was estimated by some algorithm.'), ('average', 'This is an average price.'), ('guessed', 'A human has guessed the price.')], max_length=16, verbose_name='Type of the price record.')),
                ('is_sold', models.NullBooleanField(verbose_name='Successful sale if ``True``.')),
                ('avg_period', models.CharField(choices=[('none', 'No averaging was done.'), ('day', 'Average over one day.'), ('week', 'Average over one week.'), ('month', 'Average over one month.')], max_length=16, verbose_name="Time span for taking average. Can be 'day', 'week', 'month'.")),
                ('avg_num_listings', models.IntegerField(verbose_name='Number of listings used in computation of average.')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.CharField(max_length=64, primary_key=True, serialize=False, verbose_name='Internal unique ID of each product.')),
                ('name', models.CharField(default='', max_length=256, verbose_name='Product name. A single line of text.')),
                ('important_words', models.CharField(blank=True, default='', max_length=256, verbose_name='Important words for the text recognition algorithms.')),
                ('categories', models.CharField(blank=True, default='', max_length=256, verbose_name='Categories for grouping products. Comma separated list of words (with dots in them).')),
                ('description', models.CharField(blank=True, default='', max_length=2048, verbose_name='Description of the product. Any text.')),
                ('description_url1', models.URLField(blank=True, default='', max_length=256, verbose_name='Link to website that describes the product (1).')),
                ('description_url2', models.URLField(blank=True, default='', max_length=256, verbose_name='Link to website that describes the product (2).')),
            ],
        ),
        migrations.AlterField(
            model_name='listing',
            name='description',
            field=models.CharField(blank=True, default='', max_length=10240, verbose_name='Long description of listing.'),
        ),
        migrations.AlterField(
            model_name='listing',
            name='item_url',
            field=models.URLField(blank=True, default='', max_length=256, verbose_name='Link to web representation of listing.'),
        ),
        migrations.AddField(
            model_name='price',
            name='listing',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='related_price_record', to='econdata.Listing', verbose_name='ID of listing from which the price is taken.'),
        ),
        migrations.AddField(
            model_name='price',
            name='product',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='related_price_record', to='econdata.Product', verbose_name='ID of product for which the price is recorded.'),
        ),
    ]
